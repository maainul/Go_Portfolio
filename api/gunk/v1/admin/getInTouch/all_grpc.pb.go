// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package getInTouch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetInTouchServiceClient is the client API for GetInTouchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetInTouchServiceClient interface {
	CreateGetInTouch(ctx context.Context, in *CreateGetInTouchRequest, opts ...grpc.CallOption) (*CreateGetInTouchResponse, error)
}

type getInTouchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetInTouchServiceClient(cc grpc.ClientConnInterface) GetInTouchServiceClient {
	return &getInTouchServiceClient{cc}
}

func (c *getInTouchServiceClient) CreateGetInTouch(ctx context.Context, in *CreateGetInTouchRequest, opts ...grpc.CallOption) (*CreateGetInTouchResponse, error) {
	out := new(CreateGetInTouchResponse)
	err := c.cc.Invoke(ctx, "/getInTouch.GetInTouchService/CreateGetInTouch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetInTouchServiceServer is the server API for GetInTouchService service.
// All implementations must embed UnimplementedGetInTouchServiceServer
// for forward compatibility
type GetInTouchServiceServer interface {
	CreateGetInTouch(context.Context, *CreateGetInTouchRequest) (*CreateGetInTouchResponse, error)
	mustEmbedUnimplementedGetInTouchServiceServer()
}

// UnimplementedGetInTouchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetInTouchServiceServer struct {
}

func (UnimplementedGetInTouchServiceServer) CreateGetInTouch(context.Context, *CreateGetInTouchRequest) (*CreateGetInTouchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGetInTouch not implemented")
}
func (UnimplementedGetInTouchServiceServer) mustEmbedUnimplementedGetInTouchServiceServer() {}

// UnsafeGetInTouchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetInTouchServiceServer will
// result in compilation errors.
type UnsafeGetInTouchServiceServer interface {
	mustEmbedUnimplementedGetInTouchServiceServer()
}

func RegisterGetInTouchServiceServer(s grpc.ServiceRegistrar, srv GetInTouchServiceServer) {
	s.RegisterService(&GetInTouchService_ServiceDesc, srv)
}

func _GetInTouchService_CreateGetInTouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGetInTouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetInTouchServiceServer).CreateGetInTouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getInTouch.GetInTouchService/CreateGetInTouch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetInTouchServiceServer).CreateGetInTouch(ctx, req.(*CreateGetInTouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetInTouchService_ServiceDesc is the grpc.ServiceDesc for GetInTouchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetInTouchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getInTouch.GetInTouchService",
	HandlerType: (*GetInTouchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGetInTouch",
			Handler:    _GetInTouchService_CreateGetInTouch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portfolio/api/gunk/v1/admin/getInTouch/all.proto",
}
